// Generated by PEG.js v0.11.0, https://pegjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found, location) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { file_input: peg$parsefile_input };
  var peg$startRuleFunction = peg$parsefile_input;

  var peg$c0 = "pass";
  var peg$c1 = "if";
  var peg$c2 = ":";
  var peg$c3 = "elif";
  var peg$c4 = "else";
  var peg$c5 = "for";
  var peg$c6 = "in";
  var peg$c7 = "or";
  var peg$c8 = "and";
  var peg$c9 = "not";
  var peg$c10 = "<";
  var peg$c11 = ">";
  var peg$c12 = "==";
  var peg$c13 = ">=";
  var peg$c14 = "<=";
  var peg$c15 = "<>";
  var peg$c16 = "!=";
  var peg$c17 = "is";
  var peg$c18 = "*";
  var peg$c19 = "|";
  var peg$c20 = "^";
  var peg$c21 = "&";
  var peg$c22 = "<<";
  var peg$c23 = ">>";
  var peg$c24 = "+";
  var peg$c25 = "-";
  var peg$c26 = "@";
  var peg$c27 = "/";
  var peg$c28 = "%";
  var peg$c29 = "//";
  var peg$c30 = "~";
  var peg$c31 = "**";
  var peg$c32 = "None";
  var peg$c33 = "True";
  var peg$c34 = "False";
  var peg$c35 = ",";
  var peg$c36 = "\t";
  var peg$c37 = "    ";
  var peg$c38 = "\"";
  var peg$c39 = "'";
  var peg$c40 = "\\";
  var peg$c41 = "\r\n";
  var peg$c42 = "\n";
  var peg$c43 = "\r";

  var peg$r0 = /^[a-zA-Z]/;
  var peg$r1 = /^[a-zA-Z0-9]/;
  var peg$r2 = /^[^\\]/;
  var peg$r3 = /^[\\'"abfnrtv]/;
  var peg$r4 = /^[1-9]/;
  var peg$r5 = /^[0-9]/;
  var peg$r6 = /^[ ]/;

  var peg$e0 = peg$literalExpectation("pass", false);
  var peg$e1 = peg$literalExpectation("if", false);
  var peg$e2 = peg$literalExpectation(":", false);
  var peg$e3 = peg$literalExpectation("elif", false);
  var peg$e4 = peg$literalExpectation("else", false);
  var peg$e5 = peg$literalExpectation("for", false);
  var peg$e6 = peg$literalExpectation("in", false);
  var peg$e7 = peg$literalExpectation("or", false);
  var peg$e8 = peg$literalExpectation("and", false);
  var peg$e9 = peg$literalExpectation("not", false);
  var peg$e10 = peg$literalExpectation("<", false);
  var peg$e11 = peg$literalExpectation(">", false);
  var peg$e12 = peg$literalExpectation("==", false);
  var peg$e13 = peg$literalExpectation(">=", false);
  var peg$e14 = peg$literalExpectation("<=", false);
  var peg$e15 = peg$literalExpectation("<>", false);
  var peg$e16 = peg$literalExpectation("!=", false);
  var peg$e17 = peg$literalExpectation("is", false);
  var peg$e18 = peg$literalExpectation("*", false);
  var peg$e19 = peg$literalExpectation("|", false);
  var peg$e20 = peg$literalExpectation("^", false);
  var peg$e21 = peg$literalExpectation("&", false);
  var peg$e22 = peg$literalExpectation("<<", false);
  var peg$e23 = peg$literalExpectation(">>", false);
  var peg$e24 = peg$literalExpectation("+", false);
  var peg$e25 = peg$literalExpectation("-", false);
  var peg$e26 = peg$literalExpectation("@", false);
  var peg$e27 = peg$literalExpectation("/", false);
  var peg$e28 = peg$literalExpectation("%", false);
  var peg$e29 = peg$literalExpectation("//", false);
  var peg$e30 = peg$literalExpectation("~", false);
  var peg$e31 = peg$literalExpectation("**", false);
  var peg$e32 = peg$literalExpectation("None", false);
  var peg$e33 = peg$literalExpectation("True", false);
  var peg$e34 = peg$literalExpectation("False", false);
  var peg$e35 = peg$literalExpectation(",", false);
  var peg$e36 = peg$literalExpectation("\t", false);
  var peg$e37 = peg$literalExpectation("    ", false);
  var peg$e38 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e39 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  var peg$e40 = peg$literalExpectation("\"", false);
  var peg$e41 = peg$literalExpectation("'", false);
  var peg$e42 = peg$classExpectation(["\\"], true, false);
  var peg$e43 = peg$literalExpectation("\\", false);
  var peg$e44 = peg$classExpectation(["\\", "'", "\"", "a", "b", "f", "n", "r", "t", "v"], false, false);
  var peg$e45 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e46 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e47 = peg$literalExpectation("\r\n", false);
  var peg$e48 = peg$literalExpectation("\n", false);
  var peg$e49 = peg$literalExpectation("\r", false);
  var peg$e50 = peg$classExpectation([" "], false, false);
  var peg$e51 = peg$anyExpectation();

  var peg$f0 = function(s) { return s.filter(value => value != "\n"); };
  var peg$f1 = function(s) { return s; };
  var peg$f2 = function() {return ["pass"];};
  var peg$f3 = function(t, s) { return ["if", t, s]; };
  var peg$f4 = function(e, t, s) { return  ["for", e, t, s]; };
  var peg$f5 = function(s) {return s;};
  var peg$f6 = function(head, s) {return s;};
  var peg$f7 = function(head, tail) {
        var result = [];
        [head].concat(tail).forEach(function(element) {
          result.push(element);
        });

        return result;
      };
  var peg$f8 = function(i) {
        console.log("\nSAMEDENT");
        printStack(i);
        console.log("  result: ", i.length === indentStack.length);
        return i.length === indentStack.length;
      };
  var peg$f9 = function(i) {
        console.log("s:", i.length, " level:", indentStack.length);
      };
  var peg$f10 = function(i) {
        console.log("\nINDENT");
        printStack(i);
        return i.length > indentStack.length;
      };
  var peg$f11 = function(i) {
        indentStack.push("");
        console.log("i:", i.length, " level:", indentStack.length);
      };
  var peg$f12 = function(i) {
        console.log("\nDEDENT");
        printStack(i);
        return i.length < indentStack.length;
      };
  var peg$f13 = function(i) {
        for (var j = i.length; j < indentStack.length; j++) {
          indentStack.pop();
        }
        console.log("d:", i.length + 1, " level:", indentStack.length);
      };
  var peg$f14 = function(t) { return t; };
  var peg$f15 = function() { return ""; };
  var peg$f16 = function(head, tail) { return head + tail.join(""); };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found, location),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parsefile_input() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsestmt();
    if (s2 === peg$FAILED) {
      s2 = peg$parseNEWLINE();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsestmt();
      if (s2 === peg$FAILED) {
        s2 = peg$parseNEWLINE();
      }
    }
    s2 = peg$parseEOF();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f0(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesingle_input() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsesimple_stmt();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecompound_stmt();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNEWLINE();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseNEWLINE();
      }
    }

    return s0;
  }

  function peg$parsestmt() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsesimple_stmt();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecompound_stmt();
    }

    return s0;
  }

  function peg$parsesimple_stmt() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsepass_stmt();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNEWLINE();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepass_stmt() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e0);
    if (input.substr(peg$currPos, 4) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f2();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecompound_stmt() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseif_stmt();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefor_stmt();
    }

    return s0;
  }

  function peg$parseif_stmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e1);
    if (input.substr(peg$currPos, 2) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseor_test();
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = peg$parsesuite();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              rule$expects(peg$e3);
              if (input.substr(peg$currPos, 4) === peg$c3) {
                s9 = peg$c3;
                peg$currPos += 4;
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parseor_test();
                if (s10 !== peg$FAILED) {
                  rule$expects(peg$e2);
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s11 = peg$c2;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsesuite();
                    if (s12 !== peg$FAILED) {
                      s9 = [s9, s10, s11, s12];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                rule$expects(peg$e3);
                if (input.substr(peg$currPos, 4) === peg$c3) {
                  s9 = peg$c3;
                  peg$currPos += 4;
                } else {
                  s9 = peg$FAILED;
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseor_test();
                  if (s10 !== peg$FAILED) {
                    rule$expects(peg$e2);
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s11 = peg$c2;
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsesuite();
                      if (s12 !== peg$FAILED) {
                        s9 = [s9, s10, s11, s12];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              }
              s8 = peg$currPos;
              rule$expects(peg$e4);
              if (input.substr(peg$currPos, 4) === peg$c4) {
                s9 = peg$c4;
                peg$currPos += 4;
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                rule$expects(peg$e2);
                if (input.charCodeAt(peg$currPos) === 58) {
                  s10 = peg$c2;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsesuite();
                  if (s11 !== peg$FAILED) {
                    s9 = [s9, s10, s11];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f3(s3, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefor_stmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e5);
    if (input.substr(peg$currPos, 3) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexprlist();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            rule$expects(peg$e6);
            if (input.substr(peg$currPos, 2) === peg$c6) {
              s5 = peg$c6;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetestlist();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  rule$expects(peg$e2);
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s9 = peg$c2;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsesuite();
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f4(s3, s7, s10);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesuite() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsesimple_stmt();
    if (s0 === peg$FAILED) {
      s0 = peg$parseblock();
    }

    return s0;
  }

  function peg$parseblock() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNEWLINE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINDENT();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsestmt();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$f5(s4);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseSAMEDENT();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsestmt();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f6(s3, s7);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseSAMEDENT();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestmt();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s5 = peg$f6(s3, s7);
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s5 = peg$parseDEDENT();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f7(s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseor_test() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseand_test();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e7);
      if (input.substr(peg$currPos, 2) === peg$c7) {
        s4 = peg$c7;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseand_test();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e7);
        if (input.substr(peg$currPos, 2) === peg$c7) {
          s4 = peg$c7;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseand_test();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseand_test() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsenot_test();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e8);
      if (input.substr(peg$currPos, 3) === peg$c8) {
        s4 = peg$c8;
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsenot_test();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e8);
        if (input.substr(peg$currPos, 3) === peg$c8) {
          s4 = peg$c8;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenot_test();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenot_test() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e9);
    if (input.substr(peg$currPos, 3) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenot_test();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomparison();
    }

    return s0;
  }

  function peg$parsecomparison() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsecomp_op();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseexpr();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsecomp_op();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomp_op() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e10);
    if (input.charCodeAt(peg$currPos) === 60) {
      s0 = peg$c10;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e11);
      if (input.charCodeAt(peg$currPos) === 62) {
        s0 = peg$c11;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e12);
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s0 = peg$c12;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e13);
          if (input.substr(peg$currPos, 2) === peg$c13) {
            s0 = peg$c13;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            rule$expects(peg$e14);
            if (input.substr(peg$currPos, 2) === peg$c14) {
              s0 = peg$c14;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              rule$expects(peg$e15);
              if (input.substr(peg$currPos, 2) === peg$c15) {
                s0 = peg$c15;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                rule$expects(peg$e16);
                if (input.substr(peg$currPos, 2) === peg$c16) {
                  s0 = peg$c16;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  rule$expects(peg$e6);
                  if (input.substr(peg$currPos, 2) === peg$c6) {
                    s0 = peg$c6;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    rule$expects(peg$e9);
                    if (input.substr(peg$currPos, 3) === peg$c9) {
                      s1 = peg$c9;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                      rule$expects(peg$e6);
                      if (input.substr(peg$currPos, 2) === peg$c6) {
                        s2 = peg$c6;
                        peg$currPos += 2;
                      } else {
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      rule$expects(peg$e17);
                      if (input.substr(peg$currPos, 2) === peg$c17) {
                        s0 = peg$c17;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        rule$expects(peg$e17);
                        if (input.substr(peg$currPos, 2) === peg$c17) {
                          s0 = peg$c17;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          rule$expects(peg$e9);
                          if (input.substr(peg$currPos, 3) === peg$c9) {
                            s0 = peg$c9;
                            peg$currPos += 3;
                          } else {
                            s0 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsestar_expr() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e18);
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseexpr();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpr() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsexor_expr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e19);
      if (input.charCodeAt(peg$currPos) === 124) {
        s4 = peg$c19;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsexor_expr();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e19);
        if (input.charCodeAt(peg$currPos) === 124) {
          s4 = peg$c19;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsexor_expr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsexor_expr() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseand_expr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e20);
      if (input.charCodeAt(peg$currPos) === 94) {
        s4 = peg$c20;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseand_expr();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e20);
        if (input.charCodeAt(peg$currPos) === 94) {
          s4 = peg$c20;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseand_expr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseand_expr() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseshift_expr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e21);
      if (input.charCodeAt(peg$currPos) === 38) {
        s4 = peg$c21;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseshift_expr();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e21);
        if (input.charCodeAt(peg$currPos) === 38) {
          s4 = peg$c21;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseshift_expr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseshift_expr() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsearith_expr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e22);
      if (input.substr(peg$currPos, 2) === peg$c22) {
        s4 = peg$c22;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        rule$expects(peg$e23);
        if (input.substr(peg$currPos, 2) === peg$c23) {
          s4 = peg$c23;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsearith_expr();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e22);
        if (input.substr(peg$currPos, 2) === peg$c22) {
          s4 = peg$c22;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          rule$expects(peg$e23);
          if (input.substr(peg$currPos, 2) === peg$c23) {
            s4 = peg$c23;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsearith_expr();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearith_expr() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseterm();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e24);
      if (input.charCodeAt(peg$currPos) === 43) {
        s4 = peg$c24;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        rule$expects(peg$e25);
        if (input.charCodeAt(peg$currPos) === 45) {
          s4 = peg$c25;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseterm();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e24);
        if (input.charCodeAt(peg$currPos) === 43) {
          s4 = peg$c24;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          rule$expects(peg$e25);
          if (input.charCodeAt(peg$currPos) === 45) {
            s4 = peg$c25;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseterm();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseterm() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsefactor();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e18);
      if (input.charCodeAt(peg$currPos) === 42) {
        s4 = peg$c18;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        rule$expects(peg$e26);
        if (input.charCodeAt(peg$currPos) === 64) {
          s4 = peg$c26;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          rule$expects(peg$e27);
          if (input.charCodeAt(peg$currPos) === 47) {
            s4 = peg$c27;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            rule$expects(peg$e28);
            if (input.charCodeAt(peg$currPos) === 37) {
              s4 = peg$c28;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              rule$expects(peg$e29);
              if (input.substr(peg$currPos, 2) === peg$c29) {
                s4 = peg$c29;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
              }
            }
          }
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefactor();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e18);
        if (input.charCodeAt(peg$currPos) === 42) {
          s4 = peg$c18;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          rule$expects(peg$e26);
          if (input.charCodeAt(peg$currPos) === 64) {
            s4 = peg$c26;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            rule$expects(peg$e27);
            if (input.charCodeAt(peg$currPos) === 47) {
              s4 = peg$c27;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              rule$expects(peg$e28);
              if (input.charCodeAt(peg$currPos) === 37) {
                s4 = peg$c28;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                rule$expects(peg$e29);
                if (input.substr(peg$currPos, 2) === peg$c29) {
                  s4 = peg$c29;
                  peg$currPos += 2;
                } else {
                  s4 = peg$FAILED;
                }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefactor();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefactor() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e24);
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e25);
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c25;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        rule$expects(peg$e30);
        if (input.charCodeAt(peg$currPos) === 126) {
          s1 = peg$c30;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefactor();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsepower();
    }

    return s0;
  }

  function peg$parsepower() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseatom();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      rule$expects(peg$e31);
      if (input.substr(peg$currPos, 2) === peg$c31) {
        s3 = peg$c31;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsefactor();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseatom() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseNAME();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNUMBER();
      if (s0 === peg$FAILED) {
        s0 = [];
        s1 = peg$parseSTRING();
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parseSTRING();
          }
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e32);
          if (input.substr(peg$currPos, 4) === peg$c32) {
            s0 = peg$c32;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            rule$expects(peg$e33);
            if (input.substr(peg$currPos, 4) === peg$c33) {
              s0 = peg$c33;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              rule$expects(peg$e34);
              if (input.substr(peg$currPos, 5) === peg$c34) {
                s0 = peg$c34;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseexprlist() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 === peg$FAILED) {
      s1 = peg$parsestar_expr();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e35);
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c35;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseexpr();
        if (s7 === peg$FAILED) {
          s7 = peg$parsestar_expr();
        }
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e35);
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c35;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpr();
          if (s7 === peg$FAILED) {
            s7 = peg$parsestar_expr();
          }
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e35);
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c35;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s4 = [s4, s5, s6];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetestlist() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseor_test();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e35);
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c35;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseor_test();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e35);
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c35;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseor_test();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e35);
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c35;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s4 = [s4, s5, s6];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSAMEDENT() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsetabs();
    peg$savedPos = peg$currPos;
    s2 = peg$f8(s1);
    if (s2) {
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f9(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINDENT() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsetabs();
    peg$savedPos = peg$currPos;
    s2 = peg$f10(s1);
    if (s2) {
      s2 = undefined;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f11(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEDENT() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    peg$begin();
    s1 = peg$currPos;
    s2 = peg$parsetabs();
    peg$savedPos = peg$currPos;
    s3 = peg$f12(s2);
    if (s3) {
      s3 = undefined;
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s1;
      s1 = peg$f13(s2);
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    peg$end(false);
    if (s1 !== peg$FAILED) {
      peg$currPos = s0;
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetabs() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetab();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsetab();
    }
    peg$savedPos = s0;
    s1 = peg$f14(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsetab() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e36);
    if (input.charCodeAt(peg$currPos) === 9) {
      s1 = peg$c36;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e37);
      if (input.substr(peg$currPos, 4) === peg$c37) {
        s1 = peg$c37;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNAME() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e38);
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      rule$expects(peg$e39);
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        rule$expects(peg$e39);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f16(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTRING() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e40);
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c38;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsestringitem();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsestringitem();
      }
      rule$expects(peg$e40);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c38;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e41);
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c39;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsestringitem();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsestringitem();
        }
        rule$expects(peg$e41);
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c39;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsestringitem() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsestringchar();
    if (s0 === peg$FAILED) {
      s0 = peg$parseescapeseq();
    }

    return s0;
  }

  function peg$parsestringchar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e42);
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseescapeseq() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e43);
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e44);
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNUMBER() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e45);
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      rule$expects(peg$e46);
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        rule$expects(peg$e46);
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNEWLINE() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e47);
    if (input.substr(peg$currPos, 2) === peg$c41) {
      s0 = peg$c41;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e48);
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c42;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e49);
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c43;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    rule$expects(peg$e50);
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        rule$expects(peg$e50);
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    rule$expects(peg$e50);
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      rule$expects(peg$e50);
      if (peg$r6.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    peg$begin();
    rule$expects(peg$e51);
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    peg$end(true);
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.substr(peg$currPos, 2) === peg$c41) {
      s0 = peg$c41;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c42;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c43;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }


    var indentStack = []

    function printStack(tab) {
      console.log("  tab  : ", tab);
      console.log("  stack: ", indentStack);
    }


  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

export {
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};

export default {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
